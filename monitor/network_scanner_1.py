import subprocess
import paramiko
from queue import Queue
from monitor.models import NetworkDevice, NetworkInterface, Connection
import re

SSH_USERNAME = "root"
SSH_PASSWORD = "toor"

def get_hostname_via_ssh(ip):
    """ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ SSH –∏ –ø–æ–ª—É—á–∞–µ—Ç hostname. """
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=SSH_USERNAME, password=SSH_PASSWORD, timeout=2)

        stdin, stdout, stderr = client.exec_command("hostname")
        hostname = stdout.read().decode().strip()

        client.close()
        return hostname if hostname else "Unknown"

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}: {e}")
        return "Unknown"

def get_neighbors_arp():
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç arp -a –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö IP, MAC –∏ hostname. """
    neighbors = []
    try:
        output = subprocess.check_output(["arp", "-a"]).decode()
        print(f"üìã –í—ã–≤–æ–¥ arp -a:\n{output}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è arp -a: {e}")
        return neighbors

    for line in output.split("\n"):
        match = re.search(r"(\S+) \(([\d.]+)\) at ([\w:]+) \[.*\] on (\S+)", line)
        if match:
            hostname, ip, mac, interface = match.groups()
            neighbors.append({"ip": ip, "mac": mac, "hostname": hostname, "interface": interface})

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {neighbors}")
    return neighbors

def ssh_get_arp(ip):
    """ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ SSH –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–µ–π —á–µ—Ä–µ–∑ arp -a + hostname. """
    neighbors = []
    hostname = "Unknown"

    try:
        print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ SSH –∫ {ip} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ARP-—Ç–∞–±–ª–∏—Ü—ã –∏ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞...")
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=SSH_USERNAME, password=SSH_PASSWORD, timeout=5)

        # –ü–æ–ª—É—á–∞–µ–º ARP-—Ç–∞–±–ª–∏—Ü—É
        stdin, stdout, stderr = client.exec_command("arp -a")
        output_arp = stdout.read().decode()

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
        stdin, stdout, stderr = client.exec_command("hostname")
        output_hostname = stdout.read().decode().strip()
        if output_hostname:
            hostname = output_hostname

        client.close()

        print(f"üìã –í—ã–≤–æ–¥ arp -a —Å {ip}:\n{output_arp}")
        print(f"üè∑ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {hostname}")

        # arp
        for line in output_arp.split("\n"):
            match = re.search(r"(\S+) \(([\d.]+)\) at ([\w:]+) \[.*\] on (\S+)", line)
            if match:
                neighbor_hostname, neighbor_ip, neighbor_mac, neighbor_interface = match.groups()
                neighbors.append({"ip": neighbor_ip, "mac": neighbor_mac, "hostname": neighbor_hostname, "interface": neighbor_interface})

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}: {e}")

    return neighbors, hostname

"""def add_device_to_db(ip, mac, hostname):
    # –î–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.
    if not NetworkDevice.objects.filter(ip_address=ip).exists():
        device = NetworkDevice(
            name=hostname,
            ip_address=ip,
            mac_address=mac,
            device_type="Unknown",
            status="online",
            ssh_username="root"
        )
        device.save()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {hostname} ({ip})")
    else:
        print(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {hostname} ({ip}) —É–∂–µ –≤ –ë–î.")"""


def add_device_to_db(ip, mac, hostname, interface_name="unknown"):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. """
    device, created = NetworkDevice.objects.get_or_create(
        name=hostname,
        defaults={"device_type": "unknown", "status": "unknown", "ssh_username": "root"}
    )

    interface = NetworkInterface.objects.filter(ip_address=ip).first()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
    if not interface:
       NetworkInterface.objects.create(
            device=device,
            interface_name=interface_name,
            ip_address=ip,
            mac_address=mac
       )
       print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {interface_name} –¥–ª—è {hostname} ({ip})")
def add_connection(source_ip, target_ip):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç. """
    source_interface = NetworkInterface.objects.filter(ip_address=source_ip).first()
    target_interface = NetworkInterface.objects.filter(ip_address=target_ip).first()
    
    if source_interface and target_interface:
        source = source_interface.device
        target = target_interface.device
        if not Connection.objects.filter(source=source, target=target).exists():
            Connection.objects.create(source=source, target=target)
            print(f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: {source.name} ‚Üí {target.name}")
def scan_full_network(start_ip):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å BFS. """
    print("üåç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")

    queue = Queue()
    scanned_ips = set()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π IP –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    add_device_to_db(start_ip, "unknown_mac", str(get_hostname_via_ssh(start_ip)))

    queue.put(start_ip)

    while not queue.empty():
        ip = queue.get()

        if ip in scanned_ips:
            continue
        scanned_ips.add(ip)
        print(f"üöÄ –°–∫–∞–Ω–∏—Ä—É–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {ip}")
# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π –ø–æ SSH –∏–ª–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π ARP
        if ip == start_ip:
            neighbors = get_neighbors_arp()
            hostname = "this"
        else:
            neighbors, hostname = ssh_get_arp(ip)  # üî• –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î
        add_device_to_db(ip, "unknown_mac", hostname)

        for neighbor in neighbors:
            if neighbor["ip"] not in scanned_ips:
                queue.put(neighbor["ip"])
                add_device_to_db(neighbor["ip"], neighbor["mac"], neighbor["hostname"], neighbor["interface"])
                add_connection(ip, neighbor["ip"])
    print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
