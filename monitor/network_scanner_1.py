import subprocess
import paramiko
from queue import Queue
from monitor.models import NetworkDevice, NetworkInterface, Connection
import re

SSH_USERNAME = "root"
SSH_PASSWORD = "toor"

client = paramiko.SSHClient()


def connect_via_ssh(ip):

    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(ip, username=SSH_USERNAME, password=SSH_PASSWORD, timeout=2)


def disconnect_from_ssh():
    client.close()


def get_hostname_via_ssh():
    try:

        stdin, stdout, stderr = client.exec_command("hostname")
        hostname = stdout.read().decode().strip()

        return hostname if hostname else "Unknown"

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã hostname: {e}")
        return "Unknown"


def determine_device_type(hostname, server_type, router_type, switch_type, client_type):
    hostname_lower = hostname.lower()

    if any(pattern.lower() in hostname_lower for pattern in server_type):
        return "server"
    elif any(pattern.lower() in hostname_lower for pattern in router_type):
        return "router"
    elif any(pattern.lower() in hostname_lower for pattern in switch_type):
        return "switch"
    elif any(pattern.lower() in hostname_lower for pattern in client_type):
        return "client"

    return "unknown"


def get_interfaces_via_ssh():
    current_interface = ''
    mac = ''
    interfaces = []

    try:

        stdin, stdout, stderr = client.exec_command("ip a")
        output_ip_a = stdout.read().decode().strip()

        for line in output_ip_a.split("\n"):
            if re.match(r"\d+: (\S+):", line):  # –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                current_interface = str(re.match(r"\d+: (\S+):", line).group(1))
            elif "link/ether" in line and current_interface:
                mac = re.search(r"link/ether ([\da-fA-F:]+)", line).group(1)
            elif "inet " in line and current_interface:  # –ù–∞–π–¥–µ–Ω IP-–∞–¥—Ä–µ—Å
                match = re.search(r"inet (\d+\.\d+\.\d+\.\d+)/\d+", line)
                if match:
                    ip_addr = match.group(1)
                    interfaces.append({"interface": current_interface, "ip": ip_addr, "mac": mac})

        print(interfaces)
        return interfaces if interfaces else "Unknown"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'ip a': {e}")
    return "Unknown"


def get_arp_via_ssh():
    neighbors = []

    try:
        stdin, stdout, stderr = client.exec_command("arp -a")
        output_arp = stdout.read().decode()

        print(f"üìã –í—ã–≤–æ–¥ arp -a:\n{output_arp}")

        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ `arp -a`
        for line in output_arp.split("\n"):
            match = re.search(r"(\S+) \(([\d.]+)\) at ([\w:<>]+) \[.*\] on (\S+)", line)
            if match:
                neighbor_hostname, neighbor_ip, neighbor_mac, neighbor_interface = match.groups()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ MAC-–∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (`<incomplete>`)
                if neighbor_mac == "<incomplete>":
                    continue

                neighbors.append({
                    "ip": neighbor_ip,
                    "mac": neighbor_mac,
                    "hostname": neighbor_hostname,
                    "interface": neighbor_interface
                })

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'arp -a': {e}")

    return neighbors


def add_to_db_device(hostname, device_type):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. """
    NetworkDevice.objects.get_or_create(
        name=hostname,
        defaults={"device_type": device_type, "status": "unknown", "ssh_username": "root"}
    )


def add_to_db_interface(ip, mac, name_device, interface_name):
    device = NetworkDevice.objects.get(name=f"{name_device}")

    interface = NetworkInterface.objects.filter(ip_address=ip).first()

    #TODO –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω
    if not interface:
        NetworkInterface.objects.create(
            device=device,
            interface_name=interface_name,
            ip_address=ip,
            mac_address=mac
        )
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {interface_name} –¥–ª—è {name_device} ({ip})")


def add_to_db_connection(source_device_name, target_ip, target_mac):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã (–ø–æ MAC). """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ-–∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ë–î
    source_device = NetworkDevice.objects.filter(name=source_device_name).first()
    if not source_device:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {source_device_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î
    target_interface = NetworkInterface.objects.filter(ip_address=target_ip, mac_address=target_mac).first()
    if not target_interface:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {target_ip} —Å MAC {target_mac} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
        return

    target_device = target_interface.device

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ —Å–æ–µ–¥–∏–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–∞–º–æ —Å —Å–æ–±–æ–π
    if source_device == target_device:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {source_device.name} —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
    if not Connection.objects.filter(source=source_device, target=target_device).exists():
        Connection.objects.create(source=source_device, target=target_device)
        print(f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: {source_device.name} ‚Üí {target_device.name}")
    else:
        print(f"‚ö†Ô∏è –°–≤—è–∑—å {source_device.name} ‚Üí {target_device.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def scan_full_network(start_ip, server_type, router_type, switch_type, client_type):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å BFS. """
    print("üåç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")

    queue = Queue()
    scanned_ips = set()

    queue.put(start_ip)

    while not queue.empty():
        ip = queue.get()

        if ip in scanned_ips:
            continue

        try:
            connect_via_ssh(ip)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}: {e}")
            scanned_ips.add(str(ip))
            continue

        scanned_ips.add(str(ip))
        print(f"üöÄ –°–∫–∞–Ω–∏—Ä—É–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {ip}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
        current_hostname = get_hostname_via_ssh()
        device_type = determine_device_type(current_hostname, server_type, router_type, switch_type, client_type)
        add_to_db_device(current_hostname, device_type)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for current_interface in get_interfaces_via_ssh():
            if current_interface["ip"] not in scanned_ips and current_interface["interface"] != "lo":
                add_to_db_interface(
                    current_interface["ip"],
                    current_interface["mac"],
                    current_hostname,
                    current_interface["interface"]
                )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π –ø–æ SSH –∏–ª–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π ARP
        neighbors = get_arp_via_ssh()

        for neighbor in neighbors:
            if neighbor["ip"] not in scanned_ips:
                queue.put(neighbor["ip"])
                add_to_db_device(neighbor["hostname"], device_type)
                add_to_db_interface(neighbor["ip"], neighbor["mac"], neighbor["hostname"], neighbor["interface"])
                add_to_db_connection(current_hostname, neighbor["ip"], neighbor["mac"])  # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –°–í–Ø–ó–ò

        disconnect_from_ssh()

    print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


